#!/usr/bin/python
###############################################################################
# This file is part of openWNS (open Wireless Network Simulator)
# _____________________________________________________________________________
#
# Copyright (C) 2004-2007
# Chair of Communication Networks (ComNets)
# Kopernikusstr. 16, D-52074 Aachen, Germany
# phone: ++49-241-80-27910,
# fax: ++49-241-80-22242
# email: info@openwns.org
# www: http://www.openwns.org
# _____________________________________________________________________________
#
# openWNS is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License version 2 as published by the
# Free Software Foundation;
#
# openWNS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

import sys
import os
import traceback
from PyQt4 import QtGui
import optparse

usage = 'usage: %prog [options]'
parser = optparse.OptionParser(usage)

parser.add_option('-d','--directorymode',
                  action = "store_const", dest = 'startMode', const=1,
                  help = 'open wrowser in directorymode', default=False)

parser.add_option('-p','--pythoncampaign',
                  action = "store_const",  dest = 'startMode', const=2,
                  help = 'open python campaign in wrowser', default=False)


options, args = parser.parse_args()
if len(args):
    print sys.stderr, 'Invalid argument(s): ' + str(args)
    parser.print_help()
    sys.exit(1)

if options.startMode == 1:
    print "wrowser is started in directory mode"
if options.startMode == 2:
    print "wrowser is started in python campaign mode"

# Path to this script
p = sys.path[0]
searchPath = os.path.dirname(sys.path[0])

if "openwns" in os.listdir(searchPath):
    print "Local installation of wrowser found."
    print "Prepending %s to sys.path" % searchPath
    sys.path.insert(0, searchPath)

calledFromDir = os.path.abspath(os.path.curdir)

os.chdir(searchPath)
import openwns.wrowser.Windows
 
def getBzrInfo():
    return ""

def wrowserExceptHook(eType, eValue, eTraceback):
    message = "".join(traceback.format_exception(eType, eValue, eTraceback))
    print message
    response = QtGui.QMessageBox.critical(QtGui.QApplication.activeWindow(), "Python Exception", message, "Exit", "Debug", "Continue")
    if response == 0:
        sys.exit(255)
    elif response == 1:
        '''Set a tracepoint in the Python debugger that works with Qt'''
        from PyQt4.QtCore import pyqtRemoveInputHook
        from pdb import set_trace
        pyqtRemoveInputHook()
        set_trace()
    else:
        pass

if __name__ == "__main__":
    #print "Wrowser revision: ",getBzrRevision()
    bzrInfo = getBzrInfo()
    application = QtGui.QApplication(sys.argv)
    application.setQuitOnLastWindowClosed(True)
    application.setApplicationName("Wrowser")
    application.setWindowIcon(QtGui.QIcon(":/icons/icon.png"))
    application.setOrganizationName("RWTH Aachen University - ComNets")
    application.setOrganizationDomain("www.comnets.rwth-aachen.de")
    widget = openwns.wrowser.Windows.Main(calledFromDir, options.startMode,bzrInfo)
    widget.show()
    sys.excepthook = wrowserExceptHook
    sys.exit(application.exec_())
